
#include "Varparm.h"

	using namespace std;
	namespace Varparm
	{
		/*¬ычислить произведение значений всех параметров, начина€ со второго.
		  ѕараметры: все по значению, первый параметр(int) Ц количество перемножаемых параметров(int).
		  ¬озврат : произведение значений всех параметров, начина€ со второго(int).*/

		int ivarparm(int n, ...)
		{
			int* iv = &n; 
			int sub = 1, i = 1;
			while(i <= n)
			{
				sub = sub * *(iv+i);
				i++;
			}
			return sub;
		}

		/*¬ычислить произведение значений всех параметров, начина€ со второго.
		  ѕараметры: все по значению, первый параметр(short) Ц количество перемножаемых параметров(short).
		  ¬озврат : произведение значений всех параметров, начина€ со второго(int).*/

		int svarparm(short n, ...)
		{
			int* sv = (int*)(&n);
			int i = 2;
			while( i <= n )
			{
				*(sv + 1) *= *(sv + i);
				i++;
			}
			return *(sv+1);
		}

		/*¬ычислить сумму значений всех параметров, начина€ с первого по предпоследний.
		  ѕараметры: все по значению, переменное количество параметров(float), последний параметр Ц максимальное число типа float(используйте стандартный макрос).
		  ¬озврат : сумма значений всех параметров, начина€ с первого по предпоследний(double).*/
		
		double fvarparm(float n, ...)
		{
			double* fv = (double*)(&n + 1);
			int i = 0;
			while (*(fv+i) != (double)FLT_MAX)
			{
				n += *(fv + i);
				i++;
			}
			return n;
		}
		
		/*¬ычислить сумму значений всех параметров, начина€ с первого по предпоследний.
		  ѕараметры: все по значению, переменное количество параметров(double), последний параметр Ц максимальное число типа double(используйте стандартный макрос).
		  ¬озврат : сумма значений всех параметров, начина€ с первого по предпоследний(double).*/

		double dvarparm(double n, ...)
		{
			double* dv = (&n);
			int i = 1;
			while (*(dv+i) != (double)DBL_MAX)
			{
				n += *(dv + i);
				i++;
			}
			return n;
		}
	}
